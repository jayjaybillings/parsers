---
layout: post
title: Parsers
permalink: /design/parsers
category: design
---

Parsers in Fire implement the IParser interface, which can either be implemented through direct interface realization or by using template specialization
for local parsers when appropriate.

## Local Parsers

Local Parsers in Fire represent parsers for resources that are on the local machine (i.e. - localhost). These can be streams or files, depending on the
implementation. Local Parsers implement ILocalParser or specialize the LocalParser&lt;T&gt; template.

### Templated Local Parsers

Specializations of LocalParser&lt;T&gt; should be created in the "fire" namespace. See astrophysics/SpeciesLocalParser.h for an example.

This is required by the C++ standard. If you do not create your specialization in the "fire" namespace, you will get an error like the following

```
error: specialization of ‘template<class T> class fire::LocalParser’ in different namespace [-fpermissive]
 class LocalParser<std::vector<Species>> {
```

### Delimited Text Parsers

One special class of parsers are parsers for delimited text, which is dense text with entries of the same type separated by a common *delimiter,* like a comma, space, or other character. Fire has a special subclass of LocalParser, called the DelimitedTextParser, that should be used for this type of text.

## Parsing Simplified

The simplest way to use a local parser in Fire is to use the parse<>() template function. If you
implemented LocalParser&lt;T&gt;::parse() as described above, the you are most likely parsing your file like
this 

```cpp
LocalParser<T> parser;
parser.setSource(fileName);
parser.parse();
shared_ptr<T> myData = parser.getData();
```

or perhaps by using a builder like this

```cpp
auto parser = build<LocalParser<vector<T>>, const string &>(fileName);
parser.parse();
auto myData = speciesParser.getData();
```

Both of those are great, but you can get the same function in Fire using parse&lt;T&gt;() as follows

```cpp
auto myData = parse<T>(filename);
```

In this case, the parse&lt;T&gt;() function will automatically create the parser and return your data using a LocalParser&lt;T&gt; if it is available. parse&lt;T&gt;() is specifically designed for returning vectors of type T from local files. It isn't a substitute for complex parsers, but it saves a lot of effort for regular, block-structured data.